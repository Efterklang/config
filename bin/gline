#!/usr/bin/env python3
"""
Git Repository Statistics Script
Outputs contributor statistics including lines added, deleted, modified, and commit count
"""

import subprocess
import sys
import os
from typing import Dict, List, Tuple
import argparse


# ANSI Color codes
class Colors:
    RESET = "\033[0m"
    BOLD = "\033[1m"
    DIM = "\033[2m"

    # Text colors
    BLACK = "\033[30m"
    RED = "\033[31m"
    GREEN = "\033[32m"
    YELLOW = "\033[33m"
    BLUE = "\033[34m"
    MAGENTA = "\033[35m"
    CYAN = "\033[36m"
    WHITE = "\033[37m"

    # Bright colors
    BRIGHT_BLACK = "\033[90m"
    BRIGHT_RED = "\033[91m"
    BRIGHT_GREEN = "\033[92m"
    BRIGHT_YELLOW = "\033[93m"
    BRIGHT_BLUE = "\033[94m"
    BRIGHT_MAGENTA = "\033[95m"
    BRIGHT_CYAN = "\033[96m"
    BRIGHT_WHITE = "\033[97m"

    # Background colors
    BG_BLACK = "\033[40m"
    BG_RED = "\033[41m"
    BG_GREEN = "\033[42m"
    BG_YELLOW = "\033[43m"
    BG_BLUE = "\033[44m"
    BG_MAGENTA = "\033[45m"
    BG_CYAN = "\033[46m"
    BG_WHITE = "\033[47m"


def supports_color():
    """Check if the terminal supports color output."""
    return hasattr(sys.stdout, "isatty") and sys.stdout.isatty()


def run_git_command(command: List[str], cwd: str = None) -> str:
    """Run a git command and return the output."""
    try:
        result = subprocess.run(
            command, cwd=cwd, capture_output=True, text=True, check=True
        )
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        print(f"Error running git command: {' '.join(command)}")
        print(f"Error: {e.stderr}")
        return ""


def is_git_repository(path: str) -> bool:
    """Check if the given path is a git repository."""
    git_dir = os.path.join(path, ".git")
    return os.path.exists(git_dir)


def get_contributors(repo_path: str) -> List[str]:
    """Get all unique contributors from the git repository."""
    output = run_git_command(["git", "log", "--format=%aN"], cwd=repo_path)
    if not output:
        return []

    contributors = []
    for line in output.split("\n"):
        line = line.strip()
        if line and line not in contributors:
            contributors.append(line)

    return contributors


def get_commit_count(contributor: str, repo_path: str) -> int:
    """Get the number of commits for a specific contributor."""
    output = run_git_command(
        ["git", "log", f"--author={contributor}", "--oneline"], cwd=repo_path
    )
    if not output:
        return 0

    return len(output.split("\n"))


def get_contributor_stats(contributor: str, repo_path: str) -> Tuple[int, int, int]:
    """Get commit count and line statistics for a specific contributor in one go."""
    # Get both commit count and line stats in a single git command for better performance
    output = run_git_command(
        ["git", "log", f"--author={contributor}", "--numstat", "--oneline"],
        cwd=repo_path,
    )

    if not output:
        return 0, 0, 0

    lines = output.split("\n")
    commit_count = 0
    total_added = 0
    total_deleted = 0

    for line in lines:
        line = line.strip()
        if not line:
            continue

        # Check if this is a commit line (contains hash and message)
        if "\t" not in line and len(line.split()) >= 2:
            commit_count += 1
        # Check if this is a numstat line (contains tab-separated numbers)
        elif "\t" in line:
            parts = line.split("\t")
            if len(parts) >= 2:
                added_str = parts[0]
                deleted_str = parts[1]

                # Handle binary files (marked with "-")
                if added_str != "-" and added_str.strip():
                    try:
                        total_added += int(added_str)
                    except ValueError:
                        pass

                if deleted_str != "-" and deleted_str.strip():
                    try:
                        total_deleted += int(deleted_str)
                    except ValueError:
                        pass

    return commit_count, total_added, total_deleted


def format_table(stats: List[Dict]) -> str:
    """Format the statistics as a colorful table with enhanced styling."""
    if not stats:
        return f"{Colors.YELLOW}No contributors found.{Colors.RESET}"

    use_color = supports_color()

    # Header display names with emojis
    header_display = {
        "user_name": "User Name",
        "added_line_count": "Added Lines",
        "deleted_line_count": "Deleted Lines",
        "modified_line_count": "Modified Lines",
        "commit_count": "Commits",
    }

    headers = [
        "user_name",
        "added_line_count",
        "deleted_line_count",
        "modified_line_count",
        "commit_count",
    ]

    # Calculate column widths based on display names
    widths = {}
    for header in headers:
        widths[header] = len(header_display[header])

    for stat in stats:
        for key, value in stat.items():
            widths[key] = max(widths[key], len(str(value)))

    # Add padding
    for key in widths:
        widths[key] += 3

    # Color functions
    def colorize_border(text):
        return f"{Colors.BRIGHT_CYAN}{text}{Colors.RESET}" if use_color else text

    def colorize_header(text):
        return (
            f"{Colors.BOLD}{Colors.BRIGHT_WHITE}{text}{Colors.RESET}"
            if use_color
            else text
        )

    def colorize_username(text, rank):
        if not use_color:
            return text
        if rank == 0:  # Top contributor
            return f"{Colors.BOLD}{Colors.BRIGHT_YELLOW}{text}{Colors.RESET}"
        elif rank < 3:  # Top 3
            return f"{Colors.BRIGHT_GREEN}{text}{Colors.RESET}"
        else:
            return f"{Colors.CYAN}{text}{Colors.RESET}"

    def get_display_width(text):
        """Get the display width of text, ignoring ANSI escape codes."""
        import re

        # Remove ANSI escape sequences
        ansi_escape = re.compile(r"\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])")
        clean_text = ansi_escape.sub("", text)
        return len(clean_text)

    def colorize_number(value, column):
        if not use_color:
            return str(value)

        if column == "added_line_count":
            return f"{Colors.BRIGHT_GREEN}{value}{Colors.RESET}"
        elif column == "deleted_line_count":
            return f"{Colors.BRIGHT_RED}{value}{Colors.RESET}"
        elif column == "modified_line_count":
            return f"{Colors.BRIGHT_MAGENTA}{value}{Colors.RESET}"
        elif column == "commit_count":
            return f"{Colors.BRIGHT_BLUE}{value}{Colors.RESET}"
        return str(value)

    # Build table
    lines = []

    # Title
    title = "🎯 Git Repository Statistics"
    if use_color:
        title = f"{Colors.BOLD}{Colors.BRIGHT_CYAN}{title}{Colors.RESET}"
    lines.append(f"\n{title}")
    lines.append("")

    # Top border with double lines
    top_border = "┏━" + "━┳━".join("━" * (widths[h] - 2) for h in headers) + "━┓"
    lines.append(colorize_border(top_border))

    # Header
    header_cells = []
    for header in headers:
        display_name = header_display[header]
        cell = colorize_header(display_name.center(widths[header] - 2))
        header_cells.append(cell)

    header_line = (
        colorize_border("┃ ")
        + colorize_border(" ┃ ").join(header_cells)
        + colorize_border(" ┃")
    )
    lines.append(header_line)

    # Header separator with heavy lines
    sep_line = "┣━" + "━╋━".join("━" * (widths[h] - 2) for h in headers) + "━┫"
    lines.append(colorize_border(sep_line))

    # Data rows
    for i, stat in enumerate(stats):
        row_data = []
        for header in headers:
            value = stat[header]

            if header == "user_name":
                colored_username = colorize_username(str(value), i)
                # Calculate padding for left alignment considering ANSI codes
                display_width = get_display_width(colored_username)
                padding = widths[header] - 2 - display_width
                formatted_value = colored_username + " " * padding
            elif header in [
                "added_line_count",
                "deleted_line_count",
                "modified_line_count",
                "commit_count",
            ]:
                colored_value = colorize_number(value, header)
                # Calculate padding for right alignment considering ANSI codes
                padding = widths[header] - 2 - len(str(value))
                formatted_value = " " * padding + colored_value
            else:
                formatted_value = str(value).ljust(widths[header] - 2)

            row_data.append(formatted_value)

        # Alternate row background (subtle)
        row_prefix = colorize_border("┃ ")
        row_separator = colorize_border(" ┃ ")
        row_suffix = colorize_border(" ┃")

        if use_color and i % 2 == 1:
            # Subtle background for alternate rows
            row_line = f"{row_prefix}{row_separator.join(row_data)}{row_suffix}"
        else:
            row_line = f"{row_prefix}{row_separator.join(row_data)}{row_suffix}"

        lines.append(row_line)

    # Bottom border with double lines
    bottom_border = "┗━" + "━┻━".join("━" * (widths[h] - 2) for h in headers) + "━┛"
    lines.append(colorize_border(bottom_border))

    # Summary
    total_commits = sum(stat["commit_count"] for stat in stats)
    total_added = sum(stat["added_line_count"] for stat in stats)
    total_deleted = sum(stat["deleted_line_count"] for stat in stats)

    summary = f"\n📊 Summary: {len(stats)} contributors, {total_commits} commits, {total_added:,} lines added, {total_deleted:,} lines deleted"
    if use_color:
        summary = f"{Colors.DIM}{summary}{Colors.RESET}"
    lines.append(summary)

    return "\n".join(lines)


def analyze_repository(repo_path: str) -> List[Dict]:
    """Analyze the git repository and return statistics."""
    if not is_git_repository(repo_path):
        print(f"Error: {repo_path} is not a git repository")
        return []

    contributors = get_contributors(repo_path)
    if not contributors:
        print("No contributors found in the repository")
        return []

    stats = []

    # Use the optimized function that gets all stats in one go
    for contributor in contributors:
        commit_count, added_lines, deleted_lines = get_contributor_stats(
            contributor, repo_path
        )
        modified_lines = added_lines + deleted_lines

        stats.append(
            {
                "user_name": contributor,
                "added_line_count": added_lines,
                "deleted_line_count": deleted_lines,
                "modified_line_count": modified_lines,
                "commit_count": commit_count,
            }
        )

    # Sort by commit count (descending)
    stats.sort(key=lambda x: x["commit_count"], reverse=True)

    return stats


def main():
    """Main function."""
    parser = argparse.ArgumentParser(
        description="🎯 Analyze git repository contributor statistics",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  %(prog)s                    # Analyze current directory
  %(prog)s /path/to/repo      # Analyze specific repository
  %(prog)s --no-color .       # Disable colors and emojis
        """,
    )
    parser.add_argument(
        "repo_path",
        nargs="?",
        default=".",
        help="Path to git repository (default: current directory)",
    )
    parser.add_argument(
        "--no-color", action="store_true", help="Disable colored output and emojis"
    )

    args = parser.parse_args()

    # Override color support if --no-color is specified
    if args.no_color:
        global supports_color
        supports_color = lambda: False

    # Convert to absolute path
    repo_path = os.path.abspath(args.repo_path)

    if not os.path.exists(repo_path):
        print(f"Error: Path {repo_path} does not exist")
        sys.exit(1)

    stats = analyze_repository(repo_path)
    if stats:
        print(format_table(stats))


if __name__ == "__main__":
    main()
